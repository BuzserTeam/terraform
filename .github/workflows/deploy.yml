name: 'Terraform Deploy'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '.github/workflows/deploy.yml'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod

permissions:
  id-token: write # Required for OIDC
  contents: read
  pull-requests: write

jobs:
  lint:
    name: Lint Terraform
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v3
        with:
          tflint_version: v0.44.1

      - name: Init TFLint
        run: tflint --init
        working-directory: ./

      - name: Run TFLint
        run: tflint -f compact
        working-directory: ./

  validate:
    name: Validate Terraform
    runs-on: ubuntu-latest
    needs: [lint]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
          terraform_wrapper: false

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
        working-directory: ./
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init -backend=false
        working-directory: ./

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
        working-directory: ./
        
      - name: Post Format Results
        if: steps.fmt.outcome == 'failure'
        run: |
          echo "⚠️ Terraform format check failed. Run 'terraform fmt' to fix."
          exit 1

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    needs: [validate]
    # Skip this job for pull requests - just run lint
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.4.6
          terraform_wrapper: false

      
  # Choose which account to deploy to based on environment
      - name: Configure Dev AWS Credentials
        if: ${{ github.event.inputs.environment == 'dev' || github.event.inputs.environment == null }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::433164750170:role/github_actions_role
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-session-name: GitHubActionsDevDeployment

      - name: Configure Prod AWS Credentials
        if: ${{ github.event.inputs.environment == 'prod' || github.event.inputs.environment == null }}
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::975612474095:role/github_actions_role
          aws-region: us-east-1
          role-duration-seconds: 1800
          role-session-name: GitHubActionsDevDeployment
          
      # Check for existing resources
      - name: Check for existing resources
        run: |
          echo "Checking for existing resources..."
          
          # Store resource status
          mkdir -p .resource-status
          
          # Check for DynamoDB table
          if aws dynamodb describe-table --table-name BuzserLeads &>/dev/null; then
            echo "BuzserLeads table exists" > .resource-status/dynamodb-leads.exists
            echo "::warning::DynamoDB Table BuzserLeads already exists"
          fi
          
          # Check for Lambda role
          if aws iam get-role --role-name buzser-lambda-role-${{ github.event.inputs.environment || 'dev' }} &>/dev/null; then
            echo "Lambda role exists" > .resource-status/lambda-role.exists
            echo "::warning::Lambda role buzser-lambda-role-${{ github.event.inputs.environment || 'dev' }} already exists"
          fi
          
          # Check for S3 bucket
          if aws s3api head-bucket --bucket buzser-lambda-code-${{ github.event.inputs.environment || 'dev' }} 2>/dev/null; then
            echo "S3 bucket exists" > .resource-status/lambda-bucket.exists
            echo "::warning::S3 bucket buzser-lambda-code-${{ github.event.inputs.environment || 'dev' }} already exists"
          fi
          
          # Check for Pinpoint role
          if aws iam get-role --role-name buzser-pinpoint-role &>/dev/null; then
            echo "Pinpoint role exists" > .resource-status/pinpoint-role.exists
            echo "::warning::Pinpoint role buzser-pinpoint-role already exists"
          fi
          
          # Check for SES config
          if aws ses describe-configuration-set --configuration-set-name buzser-email-config &>/dev/null; then
            echo "SES config exists" > .resource-status/ses-config.exists
            echo "::warning::SES configuration set buzser-email-config already exists"
          fi
          
          # Check for SES rule set
          if aws ses describe-receipt-rule-set --rule-set-name buzser-rules &>/dev/null; then
            echo "SES rule set exists" > .resource-status/ses-ruleset.exists
            echo "::warning::SES rule set buzser-rules already exists"
          fi
        continue-on-error: true
        working-directory: ./

      # Import existing resources
      - name: Import existing resources
        run: |
          echo "Importing existing resources into Terraform state..."
          AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          ENV="${{ github.event.inputs.environment || 'dev' }}"
          
          # Import DynamoDB table
          if [ -f .resource-status/dynamodb-leads.exists ]; then
            terraform import aws_dynamodb_table.leads_table BuzserLeads || echo "Failed to import DynamoDB table"
          fi
          
          # Import Lambda role
          if [ -f .resource-status/lambda-role.exists ]; then
            terraform import aws_iam_role.lambda_role buzser-lambda-role-${ENV} || echo "Failed to import Lambda role"
          fi
          
          # Import S3 bucket
          if [ -f .resource-status/lambda-bucket.exists ]; then
            terraform import aws_s3_bucket.lambda_bucket buzser-lambda-code-${ENV} || echo "Failed to import S3 bucket"
          fi
          
          # Import Pinpoint role
          if [ -f .resource-status/pinpoint-role.exists ]; then
            terraform import aws_iam_role.pinpoint_role buzser-pinpoint-role || echo "Failed to import Pinpoint role"
          fi
          
          # Import Pinpoint policy
          if [ -f .resource-status/pinpoint-role.exists ]; then
            terraform import aws_iam_policy.pinpoint_policy arn:aws:iam::${AWS_ACCOUNT_ID}:policy/buzser-pinpoint-policy || echo "Failed to import Pinpoint policy"
          fi
          
          # Import SES config set
          if [ -f .resource-status/ses-config.exists ]; then
            terraform import aws_ses_configuration_set.ses_config buzser-email-config || echo "Failed to import SES config"
          fi
          
          # Import SES rule set
          if [ -f .resource-status/ses-ruleset.exists ]; then
            terraform import aws_ses_receipt_rule_set.main buzser-rules || echo "Failed to import SES rule set"
          fi
        continue-on-error: true
        working-directory: ./

      # Terraform deployment steps
      - name: Terraform Init
        run: terraform init
        working-directory: ./
        
      - name: Terraform Plan
        run: terraform plan -out=tfplan -var="environment=${{ github.event.inputs.environment || 'dev' }}"
        working-directory: ./
        
      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ./
        
      # Verify deployment
      - name: Verify Deployment
        run: |
          echo "Verifying deployment in ${{ github.event.inputs.environment || 'dev' }} environment"
          aws s3 ls
          aws sts get-caller-identity